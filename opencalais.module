<?php
/**
 * @file opencalais.module
 */
 
/**
 * Implements hook_permission().
 */
function opencalais_permission() {
  return array();
}

/**
 * Implementation of hook_menu().
 */
function opencalais_menu() {
  $items = array();


  $items['admin/config/content/opencalais/tagging'] = array(
    'title' => 'Tagging',
    'description' => 'Configure Entity Tagging',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opencalais_admin_general_settings'),
    'access arguments' => array('administer opencalais'),
    'file' => 'opencalais.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );


/*
  $items['admin/settings/calais/queue'] = array(
    'title' => 'Calais Bulk Processing',
    'description' => 'Submits all Nodes of a specific type to Calais for processing',
    'page callback' => 'calais_bulk_process',
    'access arguments' => array('administer calais'),
    'weight' => 10,
    'file' => 'opencalais.admin.inc',
    'type' => MENU_LOCAL_TASK
  );
  $items['admin/settings/calais/queue/clear/%'] = array(
    'title' => 'Clear Calais Bulk Queue',
    'description' => 'Clears the bulk queue for a particular content type',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('calais_queue_clear_confirm', 5),
    'access arguments' => array('administer calais'),
    'file' => 'opencalais.admin.inc',
    'type' => MENU_CALLBACK
  );

  $items['admin/settings/calais/queue/enqueue/%'] = array(
    'title' => 'Calais Queue Processing',
    'description' => 'Submits all Content of the specified type to Calais for processing',
    'page callback' => 'calais_enqueue',
    'page arguments' => array(5),
    'access arguments' => array('administer calais'),
    'file' => 'opencalais.admin.inc',
    'type' => MENU_CALLBACK
  );
*/

  $items['node/%node/opencalais'] = array(
    'title' => 'Tags',
    'page callback' => 'opencalais_tag_form',
    'page arguments' => array(1),
    'access callback' => 'opencalais_access',
    'access arguments' => array(1),
    'weight' => 2,
    'file' => 'opencalais.pages.inc',
    'type' => MENU_LOCAL_TASK
  );

/*
  $items['node/%/calais/rdf'] = array(
    'title' => 'Calais',
    'page callback' => 'calais_get_rdf',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('access calais rdf'),
    'file' => 'opencalais.pages.inc',
    'type' => MENU_CALLBACK
  );
*/
  return $items;
}

/**
 * Implements hook_access().
 */
function opencalais_access($node) {
  return TRUE;
  // If the user can access and tagging is enabled for this node
  //return user_access('access calais') && calais_get_request_type($node) != CALAIS_REQUEST_NO;
}

/**
 * Implements hook_theme().
 */
function opencalais_theme($existing, $type, $theme, $path) {
  return array(
    'opencalais_suggestions' => array(
      'variables' => array('type' => NULL, 'field_name' => NULL, 'suggestions' => NULL),
      'path' => "$path/theme",
      'template' => 'opencalais_suggestions',
    ),
  );
}


/**
 * Implements hook_entity_info().
 */
function opencalais_entity_info() {
  $return = array(
    'opencalais_term' => array(
      'label' => t('OpenCalais Term'),
      'controller class' => 'EntityAPIController',
      'base table' => 'opencalais_term',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'tid',
        'label' => 'name',
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
    ),
  );
  
  // ***  Add a bundle here for each Entity Type?
  
  // Bundles must provide a human readable name so we can create help and error
  // messages, and the path to attach Field admin pages to.
  /*
  foreach (node_type_get_names() as $type => $name) {
    $return['node']['bundles'][$type] = array(
      'label' => $name, 
      'admin' => array(
        'path' => 'admin/structure/types/manage/%node_type', 
        'real path' => 'admin/structure/types/manage/' . str_replace('_', '-', $type), 
        'bundle argument' => 4, 
        'access arguments' => array('administer content types'),
      ),
    );
  }
  */
  
  return $return;
}

/**
 *
 */
function opencalais_node_insert($node) {
  opencalais_tag($node);
}

/**
 *
 */
function opencalais_node_update($node) {
  opencalais_tag($node);
}

/**
 *
 */
function opencalais_node_delete($node) {
  db_delete('opencalais_term_node')
            ->condition('nid', $node->nid)
            ->execute();
}

/**
 *
 */
function opencalais_tag($node) {

  // Add the term
  $guid = uniqid();
  $data = array(
    'name' => 'Mr. '. $node->title . ' ' . $guid,
    'type' => 'Person',
    'vocabulary' => 'tags',
    'guid' => $guid,    
  );
  $term = new Entity($data, 'opencalais_term');
  $term->save();

  // Relate it to the node
  db_insert('opencalais_term_node')
            ->fields(array('tid', 'nid', 'relevance'))
            ->values(array($term->tid, $node->nid, 0.5))
            ->execute();  
}

/**
 *
 */
function opencalais_tag_form($node) {
  $tids = db_select('opencalais_term_node', 'tn')
                    ->fields('tn', array('tid'))
                    ->condition('nid', $node->nid)
                    ->execute()
                    ->fetchCol();

  $terms = entity_load('opencalais_term', $tids);
  
  $rows = array();
  foreach ($terms as $tid => $term) {
    $rows[] = array($term->tid, $term->name, $term->type, $term->vocabulary, $term->guid);
  }

  $build = array(
    '#theme' => 'table',
    '#header' => array('ID', 'Name', 'Type', 'Vocab', 'GUID'),
    '#rows' => $rows,
    '#empty' => t('No tags available.'),
  );

  return $build;
}


/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function opencalais_form_node_form_alter(&$form, &$form_state, $form_id) {  
  global $language;
  dpm($language, "Language");
  $node = $form['#node'];
  $fields = opencalais_get_opencalais_tag_fields($form, 'node', $node->type);

  foreach ($fields as $opencalais_type => $field_name) {
    // Load suggestions
    $suggestions = opencalais_get_suggestions($node, $opencalais_type);
    $vars = array('type' => $opencalais_type, 'field_name' => $field_name, 'suggestions' => $suggestions);
    $themed_suggestions = theme('opencalais_suggestions', $vars); 
    $form[$field_name]['#suffix'] = $themed_suggestions;
  }

  $path = drupal_get_path('module', 'opencalais');
  $form['actions']['suggest_tags'] = array(
    '#type' => 'submit', 
    '#value' => t('Suggest Tags'), 
    '#weight' => 20,
    '#submit' => array('opencalais_suggest_tags_submit'),     
    '#ajax' => array(
      'callback' => 'opencalais_suggest_tags_callback',  
      'effect' => 'fade',
    ),
    '#attached' => array(
      'js' => array($path . '/theme/opencalais.node.js'),
      'css' => array($path . '/theme/opencalais.node.css'),
    )
  );
  
  // Should we collect them in vertical tabs?
  if (variable_get('opencalais_tags_in_verticaltab', FALSE)) {
    $form['opencalais']  = array(
      '#type' => 'fieldset', 
      '#title' => t('OpenCalais Tags'), 
      '#collapsible' => TRUE, 
      '#collapsed' => TRUE, 
      '#group' => 'additional_settings', 
      '#weight' => -2, 
    );    
    foreach ($fields as $field_name) {
      $form['opencalais'][$field_name] = $form[$field_name];
      unset($form[$field_name]);
    }
  }

}


/**
 * AJAX Callback to get OpenCalais tag suggestions for an Entity.
 */
function opencalais_get_opencalais_tag_fields($form, $entity, $bundle) {
  $fields = array();
  $entities = opencalais_get_all_entities();
  $instances = field_info_instances($entity, $bundle);
  foreach ($instances as $field_name => $instance) {
    if ($instance['widget']['module'] == 'taxonomy') {
      $field = field_info_field($field_name);
      $opencalais_type = $field['settings']['allowed_values'][0]['vocabulary'];    
      if (in_array($opencalais_type, $entities)) {
        $fields[$opencalais_type] = $field_name;
      }
    }
  }

  dpm($form, "Form");
  dpm($entities, "Entities");
  dpm($instances, "Field Instance Info");
  dpm($fields, "Fields");
  return $fields;
}


/**
 * AJAX Callback to get OpenCalais tag suggestions for an Entity.
 */
function opencalais_suggest_tags_callback($form, &$form_state) {
  
  $node = $form['#node'];  
  $fields = opencalais_get_opencalais_tag_fields($form, 'node', $node->type);
  
  // Load suggestions  
  $commands = array();
  foreach ($fields as $opencalais_type => $field_name) {
    $suggestions = opencalais_get_suggestions($node, $opencalais_type);
    $vars = array('type' => $opencalais_type, 'field_name' => $field_name, 'suggestions' => $suggestions);
    $themed_suggestions = theme('opencalais_suggestions', $vars); 
    $commands[] = ajax_command_replace("#{$field_name}_suggestions", $themed_suggestions . ' suggested @ ' . date(DATE_RFC822));        
  }
    
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Gracefully handle JS degredation by providing a multi-step form implementation
 */
function opencalais_suggest_tags_submit($form, &$form_state) {
  dpm('Implement opencalais_suggest_tags_submit callback');
}

/**
 *
 */
function opencalais_get_suggestions($node, $opencalais_type = NULL) {
  $suggestions = array(
    'City' => array(
      'City One' => 0.3, 
      'City Two' => 0.7,
    ),
    'ProvinceOrState' => array(
      'State One' => 0.5, 
      'State Two' => 0.9,
    ),
  );
  return isset($opencalais_type) ? $suggestions[$opencalais_type] : $suggestions;
}

/**
 * Create a new vocabulary with the OpenCalais key as the machine name.
 */
function opencalais_create_vocabulary($entity) {
  if (!taxonomy_vocabulary_machine_name_load($entity)) {
    $readable = opencalais_api_make_readable($entity);
    $vocabulary = (object) array(
      'name' => $readable,
      'description' => t('Tags sourced from OpenCalais about @name.', array('@name' => $readable)),
      'machine_name' => $entity,
      'module' => 'opencalais',
    );
    taxonomy_vocabulary_save($vocabulary);
  }
}

/**
 * Get a list of the entities that OpenCalais API defines:
 *    http://d.opencalais.com/1/type/em/e/.html
 *
 * @return array of OpenCalais entities, use local defaults if they cannot be retrieved remotely
 */
function opencalais_get_all_entities() {
  $entities = &drupal_static(__FUNCTION__);
  if (!empty($entities)) {
    return $entities;
  }
  
  $entities = cache_get('opencalais_entities');
  if ($entities) {
    return $entities->data;
  }

  // Try to load the entities automagically from opencalais
  $entities = array();
  $response = drupal_http_request('http://d.opencalais.com/1/type/em/e/.html');
  if (!isset($response->error)) {
    $cleaned = preg_replace('/<(link|META)(.*)>/', '', $response->data);
    $doc = simplexml_load_string($cleaned);
    $spans = $doc->xpath("//span[@rtype='entity']");
    foreach ($spans as $span) {
      $entities[] = (string)$span['label'];       
    }
  }
  else {
    // Defaults
    $entities = array(
      'Anniversary',
      'City',
      'Company',
      'Continent',
      'Country',
      'Currency',
      'EmailAddress',
      'EntertainmentAwardEvent',
      'Facility',
      'FaxNumber',
      'Holiday',
      'IndustryTerm',
      'MarketIndex',
      'MedicalCondition',
      'MedicalTreatment',
      'Movie',
      'MusicAlbum',
      'MusicGroup',
      'NaturalDisaster',
      'NaturalFeature',
      'OperatingSystem',
      'Organization',
      'Person',
      'PhoneNumber',
      'PoliticalEvent',
      'Position',
      'Product',
      'ProgrammingLanguage',
      'ProvinceOrState',
      'PublishedMedium',
      'RadioProgram',
      'RadioStation',
      'Region',
      'SportsEvent',
      'SportsGame',
      'SportsLeague',
      'Technology',
      'TVShow',
      'TVStation',
      'URL'
    );
  }

  // Special Reserved Vocabularies    
  array_push($entities, 'SocialTags', 'CalaisDocumentCategory', 'EventsFacts');
  sort($entities);
  
  cache_set('opencalais_entities', $entities, 'cache', time() + (60 * 60 * 24));  
  return $entities;
}




