<?php
/**
 * @file opencalais.module
 */

// Request constants
define('CALAIS_REQUEST_NO',             0);
define('CALAIS_REQUEST_MANUAL',         1);
define('CALAIS_REQUEST_AUTO',           2);
define('CALAIS_REQUEST_AUTO_PUBLISHED', 3);
 
// Constants for how to apply tags once retrieved
define('CALAIS_PROCESS_MANUAL', 0);
define('CALAIS_PROCESS_AUTO',   1);
 
define('CALAIS_WATCHDOG', 'OpenCalais');
 
// Node Build Mode Contant
define('CALAIS_PROCESSED', TRUE);
 
/**
 * Implementation of hook_ctools_plugin_api().
 *
 * Tell ctools that we support the default_opencalais_presets API.
 */
function opencalais_ctools_plugin_api($owner, $api) {
  if ($owner == 'opencalais' && $api == 'opencalais_default_presets') {
    return array('version' => 1);
  }
}

/**
 	* Implementation of hook_ctools_plugin_directory().
 	*
 	* Defines where to look for ctools plugin implementations
 	*/
function opencalais_ctools_plugin_directory($module, $plugin) {
 	if ($module == 'ctools' && $plugin == 'export_ui') {
   	return 'plugins/export_ui';
 	}
} 

 
 
/**
 * Implements hook_permission().
 */
function opencalais_permission() {
  return array();
}

/**
 * Implementation of hook_menu().
 */
function opencalais_menu() {
  $items = array();

  $items['admin/config/content/opencalais/tagging'] = array(
    'title' => 'Tagging',
    'description' => 'Configure Entity Tagging',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opencalais_admin_general_settings'),
    'access arguments' => array('administer opencalais'),
    'file' => 'opencalais.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  
  $items['admin/config/content/opencalais/disable_item'] = array(
    'page callback' => 'opencalais_disable_other_preset_js',
    'type' => MENU_CALLBACK,
  );
/*
  $items['admin/settings/calais/queue'] = array(
    'title' => 'Calais Bulk Processing',
    'description' => 'Submits all Nodes of a specific type to Calais for processing',
    'page callback' => 'calais_bulk_process',
    'access arguments' => array('administer calais'),
    'weight' => 10,
    'file' => 'opencalais.admin.inc',
    'type' => MENU_LOCAL_TASK
  );
  $items['admin/settings/calais/queue/clear/%'] = array(
    'title' => 'Clear Calais Bulk Queue',
    'description' => 'Clears the bulk queue for a particular content type',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('calais_queue_clear_confirm', 5),
    'access arguments' => array('administer calais'),
    'file' => 'opencalais.admin.inc',
    'type' => MENU_CALLBACK
  );

  $items['admin/settings/calais/queue/enqueue/%'] = array(
    'title' => 'Calais Queue Processing',
    'description' => 'Submits all Content of the specified type to Calais for processing',
    'page callback' => 'calais_enqueue',
    'page arguments' => array(5),
    'access arguments' => array('administer calais'),
    'file' => 'opencalais.admin.inc',
    'type' => MENU_CALLBACK
  );
*/
/*
  $items['node/%/calais/rdf'] = array(
    'title' => 'Calais',
    'page callback' => 'calais_get_rdf',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('access calais rdf'),
    'file' => 'opencalais.pages.inc',
    'type' => MENU_CALLBACK
  );
*/
  return $items;
}

/**
 * Implements hook_theme().
 */
function opencalais_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'opencalais');
  return array(
    'opencalais_suggestions' => array(
      'variables' => array('type' => NULL, 'field_name' => NULL, 'suggestions' => NULL, 'language' => LANGUAGE_NONE),
      'path' => "$path/theme",
      'template' => 'opencalais_suggestions',
    ),
    'opencalais_preset_form' => array(
      'render element' => 'form',
      'path' => "$path/theme",
      'file' => 'theme.inc',
    ),
  );
}


/**
 * Implements hook_entity_info().
 */
function opencalais_entity_info() {
  $return = array(
    'opencalais_term' => array(
      'label' => t('OpenCalais Term'),
      'controller class' => 'EntityAPIController',
      'base table' => 'opencalais_term',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'tid',
        'label' => 'name',
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
    ),
  );
  
  // ***  Add a bundle here for each Entity Type?
  
  // Bundles must provide a human readable name so we can create help and error
  // messages, and the path to attach Field admin pages to.
  /*
  foreach (node_type_get_names() as $type => $name) {
    $return['node']['bundles'][$type] = array(
      'label' => $name, 
      'admin' => array(
        'path' => 'admin/structure/types/manage/%node_type', 
        'real path' => 'admin/structure/types/manage/' . str_replace('_', '-', $type), 
        'bundle argument' => 4, 
        'access arguments' => array('administer content types'),
      ),
    );
  }
  */
  
  return $return;
}

/**
 * Implements hook_node_insert().
 */
function opencalais_node_insert($node) {
  opencalais_tag($node);
}

/**
 * Implements hook_node_update().
 */
function opencalais_node_update($node) {
  opencalais_tag($node);
}

/**
 * Implements hook_node_delete().
 */
function opencalais_node_delete($node) {
  db_delete('opencalais_term_node')
            ->condition('nid', $node->nid)
            ->execute();
}

/**
 * Tag the given node content with OpenCalais
 */
function opencalais_tag($node) {

  // Add the term
  $guid = uniqid();
  $data = array(
    'name' => 'Mr. '. $node->title . ' ' . $guid,
    'type' => 'Person',
    'vocabulary' => 'tags',
    'guid' => $guid,    
  );
  $term = new Entity($data, 'opencalais_term');
  $term->save();

  // Relate it to the node
  db_insert('opencalais_term_node')
            ->fields(array('tid', 'nid', 'relevance'))
            ->values(array($term->tid, $node->nid, 0.5))
            ->execute();  
}


/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function opencalais_form_node_form_alter(&$form, &$form_state, $form_id) {  
  $node = $form['#node'];
  $fields = opencalais_get_opencalais_tag_fields($form, 'node', $node->type);

  foreach ($fields as $opencalais_type => $field_name) {
    // Load suggestions
    $suggestions = opencalais_get_suggestions($node, $opencalais_type);
    $vars = array(
      'type' => $opencalais_type, 
      'field_name' => $field_name, 
      'suggestions' => $suggestions, 
      'language' => $form['language']['#value']
    );
    $themed_suggestions = theme('opencalais_suggestions', $vars); 
    $form[$field_name]['#suffix'] = $themed_suggestions;
  }
  //TODO: I think we should hide the suggest tags button if no fields are found
  $path = drupal_get_path('module', 'opencalais');
  $form['actions']['suggest_tags'] = array(
    '#type' => 'submit', 
    '#value' => t('Suggest Tags'), 
    '#weight' => 20,
    '#submit' => array('opencalais_suggest_tags_submit'),     
    '#ajax' => array(
      'callback' => 'opencalais_suggest_tags_callback',  
      'effect' => 'fade',
    ),
    '#attached' => array(
      'js' => array($path . '/theme/opencalais.node.js'),
      'css' => array($path . '/theme/opencalais.node.css'),
    )
  );
  
  // Should we collect them in vertical tabs?
  if (variable_get('opencalais_tags_in_verticaltab', FALSE)) {
    $form['opencalais']  = array(
      '#type' => 'fieldset', 
      '#title' => t('OpenCalais Tags'), 
      '#collapsible' => TRUE, 
      '#collapsed' => TRUE, 
      '#group' => 'additional_settings', 
      '#weight' => -2, 
    );    
    foreach ($fields as $field_name) {
      $form['opencalais'][$field_name] = $form[$field_name];
      unset($form[$field_name]);
    }
  }

}


/**
 * AJAX Callback to get OpenCalais tag suggestions for an Entity.
 */
function opencalais_get_opencalais_tag_fields($form, $entity, $bundle) {
  $fields = array();
  $entities = opencalais_get_all_entities();
  $instances = field_info_instances($entity, $bundle);
  foreach ($instances as $field_name => $instance) {
    if ($instance['widget']['module'] == 'taxonomy') {
      $field = field_info_field($field_name);
      $opencalais_type = $field['settings']['allowed_values'][0]['vocabulary'];    
      if (in_array($opencalais_type, $entities)) {
        $fields[$opencalais_type] = $field_name;
      }
    }
  }

  dpm($form, "Form");
  dpm($entities, "Entities");
  dpm($instances, "Field Instance Info");
  dpm($fields, "Fields");
  return $fields;
}


/**
 * AJAX Callback to get OpenCalais tag suggestions for an Entity.
 */
function opencalais_suggest_tags_callback($form, &$form_state) {
  
  $node = node_form_submit_build_node($form, $form_state);  
  
  $fields = opencalais_get_opencalais_tag_fields($form, 'node', $node->type);
  
  // Load suggestions  
  $commands = array();
  foreach ($fields as $opencalais_type => $field_name) {
    $suggestions = opencalais_get_suggestions($node, $opencalais_type);
    $vars = array(
      'type' => $opencalais_type, 
      'field_name' => $field_name, 
      'suggestions' => $suggestions, 
      'language' => $form['language']['#value']
    );
    $themed_suggestions = theme('opencalais_suggestions', $vars); 
    $commands[] = ajax_command_replace("#{$field_name}_suggestions", $themed_suggestions . ' suggested @ ' . date(DATE_RFC822));        
    
    // TODO: If auto-apply, add a command to add/normalize the values in the term reference field
  }
    
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Gracefully handle JS degredation by providing a multi-step form implementation
 */
function opencalais_suggest_tags_submit($form, &$form_state) {
  $node = node_form_submit_build_node($form, $form_state);  
  $suggestions = opencalais_get_suggestions($node);
  dpm($suggestions, "Suggestions");
  dpm('Implement opencalais_suggest_tags_submit callback');
}

/**
 *
 */
function opencalais_get_suggestions(&$node, $opencalais_type = NULL) {
  $tag_cache = &drupal_static(__FUNCTION__);

  if ($tag_cache && array_key_exists($node->ocid, $tag_cache)) {
    $suggestions = $tag_cache[$node->ocid];    
  }
  else {
    // Needed to support caching of unsaved nodes
    if (empty($node->ocid)) {
      $node->ocid = !empty($node->nid) ? $node->nid : uniqid();
    }
    
    $elements = node_view($node);
    //$body = strip_tags(drupal_render($elements));
    $body = drupal_render($elements);
    $date = format_date($node->created, 'custom', 'r');
  
    // Allow modification of the content sent to Calais
    drupal_alter("opencalais_body", $body, $node);
    
    $opencalais = opencalais_api_get_service();
    //$tags = $opencalais->analyzeXML($node->title, $body, $date);
    $tags = $opencalais->analyzeHTML($body);
    
    dpm($tags, "Tags back from OpenCalais");

    //get the presets for this node type
    $presets = opencalais_get_enabled_preset_by_type($node->type);
    
    $suggestions = array();    
    foreach ($tags as $type => $metadata) {
      $terms = array();
      foreach ($metadata->terms as $guid => $term) {
        //only add it if its relevant
        if(opencalais_check_suggestion($presests, $type, $term)){  
          $terms[$term->name] = (float)$term->relevance;
        }
      }  
      $suggestions[$type] = $terms;
    }   
  }
  dpm($suggestions, "Suggs on the inside");
  dpm($opencalais_type, "OC Type");

  $tag_cache[$node->ocid] = $suggestions;
  return isset($opencalais_type) ? $suggestions[$opencalais_type] : $suggestions;
}

function opencalais_check_suggestion($preset, $type, $term){
  if($preset->config['entities'][$type] && $preset->config['entities'][$type]['enabled'] && 
    $preset->config['entities'][$type]['threshold'] <= $term->relevance){
    return TRUE;
  } else {
    return FALSE;
  }
}

/**
 * Create a new vocabulary with the OpenCalais key as the machine name.
 */
function opencalais_create_vocabulary($entity) {
  if (!taxonomy_vocabulary_machine_name_load($entity)) {
    $readable = opencalais_api_make_readable($entity);
    $vocabulary = (object) array(
      'name' => $readable,
      'description' => t('Tags sourced from OpenCalais about @name.', array('@name' => $readable)),
      'machine_name' => $entity,
      'module' => 'opencalais',
    );
    taxonomy_vocabulary_save($vocabulary);
  }
}

/**
 * Get a list of the entities that OpenCalais API defines:
 *    http://d.opencalais.com/1/type/em/e/.html
 *
 * @return array of OpenCalais entities, use local defaults if they cannot be retrieved remotely
 */
function opencalais_get_all_entities() {
  $entities = &drupal_static(__FUNCTION__);
  if (!empty($entities)) {
    return $entities;
  }
  
  $entities = cache_get('opencalais_entities');
  if ($entities) {
   $entities = $entities->data;   
    return $entities;
  }
  // Try to load the entities automagically from opencalais
  $entities = array();
  $response = drupal_http_request('http://d.opencalais.com/1/type/em/e/.html');
  if (!isset($response->error)) {
    $cleaned = preg_replace('/<(link|META)(.*)>/', '', $response->data);
    $doc = simplexml_load_string($cleaned);
    $spans = $doc->xpath("//span[@rtype='entity']");
    foreach ($spans as $span) {
      $entities[] = (string)$span['label'];       
    }
  }
  else {
    // Defaults
    $entities = array(
      'Anniversary',
      'City',
      'Company',
      'Continent',
      'Country',
      'Currency',
      'EmailAddress',
      'EntertainmentAwardEvent',
      'Facility',
      'FaxNumber',
      'Holiday',
      'IndustryTerm',
      'MarketIndex',
      'MedicalCondition',
      'MedicalTreatment',
      'Movie',
      'MusicAlbum',
      'MusicGroup',
      'NaturalDisaster',
      'NaturalFeature',
      'OperatingSystem',
      'Organization',
      'Person',
      'PhoneNumber',
      'PoliticalEvent',
      'Position',
      'Product',
      'ProgrammingLanguage',
      'ProvinceOrState',
      'PublishedMedium',
      'RadioProgram',
      'RadioStation',
      'Region',
      'SportsEvent',
      'SportsGame',
      'SportsLeague',
      'Technology',
      'TVShow',
      'TVStation',
      'URL'
    );
  }

  // Special Reserved Vocabularies    
  array_push($entities, 'SocialTags', 'CalaisDocumentCategory', 'EventsFacts');
  sort($entities);

  cache_set('opencalais_entities', $entities, 'cache', time() + (60 * 60 * 24));  
  return $entities;
}

/**
 * Renders the query form.
 */
function opencalais_preset_form(&$form, &$form_state) {
  $item = $form_state['item'];
  
  $form['#theme'] = 'opencalais_preset_form';

  $form['info']['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#description' => t('The human readable name for this preset'),
    '#default_value' => $item->title,
  );
  $form['info']['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description'),
    '#description' => t('The description for this preset.'),
    '#default_value' => $item->description,
  );  
  $form['info']['entity'] = array(
    '#type' => 'value',
    '#value' => 'node',
  );
  
  if ($form_state['op'] == 'edit') {

    $form['info']['bundle'] = array(
      '#type' => 'textfield',
      '#disabled' => TRUE,
      '#title' => t('Content Type'),
      '#value' => $item->bundle,
      '#description' => t('The content type to tag.'),
    );

    //TODO: Allow them to ajaxy change the type
  }
  else {
    node_types_rebuild();
    $node_types = node_type_get_names();
    
     //remove types that already have a preset
    foreach($node_types as $key=>$value){
      if(opencalais_get_preset_by_type($key)){
        unset($node_types[$key]);
      }
    }
             
    $form['info']['bundle'] = array(
      '#type' => 'select',
      '#required' => TRUE,
      '#title' => t('Content Type'),
      '#default_value' => $item->bundle,
      '#options' => $node_types,
      '#description' => t('The content type to tag.  Only content types that do not already have a preset are listed'.
        ' since content types may only have one preset at a time.'),
    );
    
   
  }

  $process_options = array(
    CALAIS_PROCESS_MANUAL => t('NEVER: suggest the terms, but let me tag the content'),
    CALAIS_PROCESS_AUTO   => t('ALWAYS: tag the content automatically'),
  );
  $form['info']['process'] = array(
    '#type' => 'radios',
    '#title' => t('Tag content'),
    '#default_value' => $item->process,
    '#options' => $process_options,
  );
  
  $form['info']['config'] = array('#tree' => TRUE);
  $form['info']['config']['entities'] = array('#tree' => TRUE);

  $entities = opencalais_get_all_entities();
  sort($entities);
  
  $entity_defaults = isset($item->config['entities']) ? $item->config['entities'] : array('enabled' => TRUE, 'threshold' => 0.0);
  
  foreach ($entities as $entity) {
    $defaults = isset($entity_defaults[$entity]) ? $entity_defaults[$entity] : $entity_defaults;
  
    $form['info']['config']['entities'][$entity]['enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enabled'),
      '#title_display' => 'invisible',
      '#default_value' => $defaults['enabled'],
      '#description' => t('Should this content type be tagged with this category'),
    );
    $form['info']['config']['entities'][$entity]['threshold'] = array(
      '#type' => 'textfield',
      '#size' => 5,
      '#title' => t('Minimum suggested tag relevancy'),
      '#title_display' => 'invisible',
      '#default_value' => $defaults['threshold'],
      '#description' => t('Determine how relevant a term must be in order for Calais to suggest it for a particular node.  Based on a 0.00-1.00 scale, with 0.00 being least relevant (i.e. many terms appear).'),
      '#attributes' => array('class' => array('threshold_slider')),
    );
    // TODO: Allow mapping to different vocabularies?
  }
  
  return $form;
}

/**
 * Validate the query form submission.
 */
function opencalais_preset_form_validate(&$form, &$form_state) {

  if($form_state['op'] == 'edit' || $form_state['op'] == 'add'){
    if(!$form_state['values']['bundle']){
      form_set_error('bundle', 'Content Type cannot be blank:');
    } else {
      if($presets = opencalais_get_preset_by_type($form_state['values']['bundle'])){
        if(count($presets)==1 && $presets[$form_state['values']['name']]){
          return;
        } else {
          form_set_error('bundle', 'This content type already has a preset.  Each content type may only have 1 preset.');
        }
      }
    }
  }
}

/**
 * Handle the form submission for ctool export_ui.
 */
function opencalais_preset_form_submit(&$form, &$form_state) {
  $values = $form_state['values'];
  
  $form_state['item']->name = $values['name'];
  $form_state['item']->title = $values['title'];
  $form_state['item']->description = $values['description'];
  $form_state['item']->entity = $values['entity'];
  $form_state['item']->bundle = $values['bundle'];
  $form_state['item']->process = $values['process'];
  $form_state['item']->config = $values['config'];
  
  
}

/**
* Implementation of hook_default_opencalais_preset().
*
* Provide a couple of default presets.
* Cache it so we don't have to recreate them every time
*/
function opencalais_opencalais_default_preset() {

  if($presets = cache_get('opencalais-presets')){
    
    return $presets->data;
  }
  $presets = array();
   
  $node_types = array();
  
   if(node_type_get_type('article')){
     $node_types['article'] = 'Article';
   }
   
   if(node_type_get_type('page')){
     $node_types['page'] = 'Basic Page';
   }
    
  foreach ($node_types as $key=>$name) {
    
    $preset = new stdClass;
    $preset->disabled = TRUE;
    $preset->api_version = 1;
    $preset->bundle = $key;
    $preset->process = 0;
    $preset->title = $name;
    $preset->name = 'opencalias-default-'.$key;
    $preset->description = '';
    $preset->send_calais_request = // CALAIS_REQUEST_NO;
    $preset->tag_content = CALAIS_PROCESS_MANUAL;
    $preset->tag_config = 'a:0:{}';    
        
    $presets[$preset->name]= $preset;
  }
  
  cache_set('opencalais-presets', $presets);
  
  return $presets;  
}

 
 //  Wrapper functions for getting presets - make it easier to use the export_load functions
 
 // creates a function to alter all the presets after they've been loaded and to allow for some static caching to improve performance
 function opencalais_load_presets($name){
   $altered = &drupal_static(__FUNCTION__ . '_altered');
   $presets = &drupal_static(__FUNCTION__);
   
   if (!isset($presets)) {
     $presets = $altered = array();
     if ( $presets = cache_get('opencalais_presets', 'cache') ) {
        $presets = $presets->data;
     }
     else {
       //Not using all because it hides the disabled/enabled flag
       $presets = ctools_export_load_object('opencalais_preset', 'condition', array());

       drupal_alter('opencalais_presets', $presets);
       cache_set('opencalais_presets', $presets);
     }
   }
   if (isset($name)) {
     
     return isset($presets[$name]) ? $presets[$name] : FALSE;
   }
   return $presets;
 }
 
 /**
  *  Preset_name is the machine name of the preset you which to load
  *  Returns an array in the form preset_name => preset_data
  */
function opencalais_get_preset($preset_name){
  return opencalais_load_presets($preset_name, FALSE);
}

/**
 *  Content type is the machine name of the content type to load presets for
 *  Returns an array in the form preset_name => preset_data  - ONLY returns 1 preset
 */
function opencalais_get_preset_by_type($content_type){
  $presets = opencalais_load_presets(NULL, FALSE);
  
  foreach($presets as $key=>$preset){
    if($preset->bundle == $content_type){
      return array($key=>$preset);
    }
  }
  //no presets were found so just return an empty array
  return array();
}

/**
 *  Content type is the machine name of the content type to load presets for - this will only load enabled 
 *  Returns an array in the form preset_name => preset_data - ONLY returns 1 preset
 */
function opencalais_get_enabled_preset_by_type($content_type){
  $presets = opencalais_load_presets(NULL, FALSE);

  foreach($presets as $key=>$preset){
    if($preset->bundle == $content_type && !$preset->disabled){
      return array($key=>$preset);
    }
  }
  //no presets were found so just return an empty array
  return array();
}

/**
 *  returns a list of all the current presets
 *  Returns an array in the form preset_name => preset_data
 */
function opencalais_get_all_presets(){
  return opencalais_load_presets(NULL, FALSE);
}


/*
 *  Functions to add fields to a content_type via a wizard style thingie
 */
 
 /**
  *  Add a field to a content_type - creates a taxonomy field
  *  @param content_type should be the string machine name of a content type
  *  @param field_name should be the string name of the field
  *  Some settings cannot be specified through this function - this is really just a utility wrapper for the fields api
  */
 function opencalais_add_field($content_type, $field_name, $taxonomy_name, $title='', $description='' ){
   node_types_rebuild();
   
   //since opencalais fields are taxonomy term references
   $taxonomy_field = taxonomy_field_info();
   $taxonomy_widget = taxonomy_field_widget_info();
   
   // Create all the fields we are adding to our content type.
   // http://api.drupal.org/api/function/field_create_field/7
   $taxonomy_field['field_name'] = $field_name;
   
   //handle any fieldexceptions that occur by just setting and error message and returning
   try{
     field_create_field($taxonomy_field);
   } catch (FieldException f){
     drupal_set_message($f->getMessage(), $type = 'error');
     return;
   }
   $instance = taxonomy_field;
   
   // Create all the instances for our fields.
   // http://api.drupal.org/api/function/field_create_instance/7
   $instance['field_name'] = $field['field_name'];
   $instance['title'] = $title ? $title : $field['field_name'];
   $instance['description'] = $description;
   $instance['widget'] = $taxonomy_widget;
   $instance['entity_type'] = 'node';
   $instance['bundle'] = $content_type;
   //limit to the proper taxonomy name
   $instance['settings']['allowed_values'][0] = array(
     'vocabulary' => $taxonomy_name,
     'parent' => 0,
   );
   
   //handle any fieldexceptions that occur by just setting and error message and returning
   try{
     field_create_instance($instance);
   } catch (FieldException f){
     drupal_set_message($f->getMessage(), $type = 'error');
     return;
   }
 }
 
 /**
  *  Create all the fields for a content type 
  *  @param content_type - the string name of the content type
  *  @param vocabs - an array of vocab names, if specified this will limit the vocabularies to those in the list
  */
 function opencalais_create_fields($content_type, $vocabs = array()){
   if(!$vocabs){
     $vocabs = opencalais_get_all_entities();
   }
   
   foreach($vocabs as $vocab){
     opencalais_add_field($content_type, 'opencalais_'.$vocab.'_tags', $vocab, 'OpenCalais Tags for ' . $vocab, '');
   }
 }
 